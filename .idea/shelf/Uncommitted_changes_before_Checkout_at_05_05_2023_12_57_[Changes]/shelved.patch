Index: src/main/java/com/n4ims/hotelsystem/persistence/BookingDataServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.n4ims.hotelsystem.persistence;\r\n\r\nimport com.n4ims.hotelsystem.entities.*;\r\nimport jakarta.persistence.*;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.lang.invoke.MethodHandles;\r\nimport java.util.*;\r\n\r\npublic class BookingDataServiceImpl implements BookingDataService{\r\n    private static final String PERSISTENCE_UNIT = \"HOTEL_SYSTEM\";\r\n    private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\r\n\r\n    @Override\r\n    public List<RoomBookingEntity> getAllBookingsForPeriod(Date fromDate, Date endDate) {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public List<RoomEntity> getAllFreeRoomsForPeriod(RoomTypeEntity roomType, Date fromDate, Date toDate) {\r\n\r\n        try (EntityManagerFactory factory = Persistence.createEntityManagerFactory(PERSISTENCE_UNIT);\r\n             EntityManager em = factory.createEntityManager()) {\r\n\r\n            TypedQuery<RoomEntity> query = em.createQuery(\"\"\"\r\n                SELECT e FROM RoomEntity e\r\n                    WHERE e NOT IN (SELECT DISTINCT r FROM RoomEntity r\r\n                                 INNER JOIN e.roomBookings b\r\n                                    WHERE r.id = b.id\r\n                                    AND (\r\n                                        (b.fromDate >= ?1 AND b.toDate <= ?2)\r\n                                        OR (b.fromDate <= ?1 AND b.toDate > ?1)\r\n                                        OR (b.fromDate >= ?1 AND b.toDate > ?1)\r\n                                    )\r\n                                )\r\n                    AND ( e.type = ?3 OR ?3 = null)\r\n            \"\"\", RoomEntity.class);\r\n\r\n            query.setParameter(1, fromDate);\r\n            query.setParameter(2, toDate);\r\n            query.setParameter(3, roomType);\r\n\r\n            try {\r\n                log.debug(\"Fetching free rooms from database\", fromDate, toDate);\r\n                List<RoomEntity> freeRooms = query.getResultList();\r\n                return freeRooms;\r\n            } catch (NoResultException e) {\r\n                log.info(\"No rooms for period \" + fromDate + \"-\" + toDate);\r\n                return new ArrayList<RoomEntity>();\r\n            } catch (PersistenceException e) {\r\n                log.error(e.toString(), e);\r\n                throw e;\r\n            }\r\n        } catch (PersistenceException e){\r\n            log.error(e.toString(), e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<CateringTypeEntity> getAllCateringTypes() throws PersistenceException{\r\n        try (EntityManagerFactory factory = Persistence.createEntityManagerFactory(PERSISTENCE_UNIT);\r\n             EntityManager em = factory.createEntityManager();) {\r\n\r\n            TypedQuery<CateringTypeEntity> query = em.createQuery(\"SELECT t FROM CateringTypeEntity t\", CateringTypeEntity.class);\r\n\r\n            return executeTypedQuery(query);\r\n        } catch (NoResultException e) {\r\n            log.info(\"No catering types in database\");\r\n            return new ArrayList<CateringTypeEntity>();\r\n        } catch (PersistenceException e) {\r\n            // TODO show user error message: database down\r\n            log.error(e.toString(), e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<RoomTypeEntity> getAllRoomTypes() throws PersistenceException {\r\n        try (EntityManagerFactory factory = Persistence.createEntityManagerFactory(PERSISTENCE_UNIT);\r\n             EntityManager em = factory.createEntityManager();) {\r\n\r\n            TypedQuery<RoomTypeEntity> query = em.createQuery(\"SELECT t FROM RoomTypeEntity t\", RoomTypeEntity.class);\r\n\r\n            return executeTypedQuery(query);\r\n        } catch (NoResultException e) {\r\n            log.info(\"No room types in database\", e);\r\n            return new ArrayList<RoomTypeEntity>();\r\n        } catch (PersistenceException e) {\r\n            // TODO show user error message: database down\r\n            log.error(e.toString(), e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private <T> void persistSingleEntity(T entity) throws PersistenceException{\r\n        EntityManagerFactory factory = Persistence.createEntityManagerFactory(PERSISTENCE_UNIT);\r\n        EntityManager em = factory.createEntityManager();\r\n\r\n        try {\r\n            em.getTransaction().begin();\r\n            em.persist(entity);\r\n            em.getTransaction().commit();\r\n        } catch (PersistenceException e){\r\n            em.getTransaction().rollback();\r\n            log.error(e.toString(), e);\r\n            throw e;\r\n        } finally {\r\n            factory.close();\r\n            em.close();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void persistRoomBooking(RoomBookingEntity roomBooking) throws PersistenceException {\r\n        persistSingleEntity(roomBooking);\r\n    }\r\n\r\n    @Override\r\n    public void persistAddress(AddressEntity address) throws PersistenceException{\r\n        boolean inDb = ifAddressInDbUpdateId(address);\r\n\r\n        persistAddress(address);\r\n    }\r\n\r\n    @Override\r\n    public void persistGuest(GuestEntity guest) throws PersistenceException{\r\n        boolean inDb = ifGuestInDbUpdateId(guest);\r\n\r\n        persistGuest(guest);\r\n    }\r\n\r\n    @Override\r\n    public void persistCateringBookings(Set<CateringBookingEntity> cateringBookings) {\r\n        EntityManagerFactory factory = Persistence.createEntityManagerFactory(PERSISTENCE_UNIT);\r\n        EntityManager em = factory.createEntityManager();\r\n\r\n        try{\r\n            em.getTransaction().begin();\r\n\r\n            for(CateringBookingEntity cb: cateringBookings){\r\n                em.persist(cb);\r\n            }\r\n\r\n            em.getTransaction().commit();\r\n        } catch (PersistenceException e){\r\n            em.getTransaction().rollback();\r\n            log.error(e.toString(), e);\r\n            throw e;\r\n        } finally {\r\n            factory.close();\r\n            em.close();\r\n        }\r\n    }\r\n\r\n    public boolean ifAddressInDbUpdateId(AddressEntity address){\r\n        try (EntityManagerFactory factory = Persistence.createEntityManagerFactory(PERSISTENCE_UNIT);\r\n             EntityManager em = factory.createEntityManager();) {\r\n\r\n\r\n            //check if entity already exists in DB\r\n            if (address.getId() == null){\r\n                TypedQuery<AddressEntity> query = em.createQuery(\"\"\"\r\n                        SELECT a FROM AddressEntity a \r\n                        WHERE a.streetName = :streetName\r\n                            AND a.streetNumber = :streetNr\r\n                            AND a.place = :place\r\n                            AND a.postcode = :postcode\r\n                            AND a.country = :country\r\n                        \"\"\", AddressEntity.class);\r\n\r\n                query.setParameter(\"streetName\", address.getStreetName());\r\n                query.setParameter(\"streetNr\", address.getStreetNumber());\r\n                query.setParameter(\"place\", address.getPlace());\r\n                query.setParameter(\"postcode\", address.getPostcode());\r\n                query.setParameter(\"country\", address.getCountry());\r\n\r\n                List<AddressEntity> guests = executeTypedQuery(query);\r\n\r\n                if (guests.isEmpty()){\r\n                    return false;\r\n                } else{\r\n                    Integer id = guests.get(0).getId();\r\n                    address.setId(id);\r\n                    return true;\r\n                }\r\n            } else {\r\n                AddressEntity g = em.find(AddressEntity.class, address.getId());\r\n                address.setId(g.getId());\r\n                return true;\r\n            }\r\n        } catch (NoResultException e) {\r\n            log.info(\"No catering types in database\");\r\n            return false;\r\n        } catch (PersistenceException e) {\r\n            // TODO show user error message: database down\r\n            log.error(e.toString(), e);\r\n            throw e;\r\n        }\r\n\r\n    }\r\n\r\n    private boolean ifGuestInDbUpdateId(GuestEntity guest){\r\n        try (EntityManagerFactory factory = Persistence.createEntityManagerFactory(PERSISTENCE_UNIT);\r\n             EntityManager em = factory.createEntityManager();) {\r\n\r\n\r\n            //check if entity already exists in DB\r\n            if (guest.getId() == null){\r\n                TypedQuery<GuestEntity> query = em.createQuery(\"\"\"\r\n                        SELECT g FROM GuestEntity g \r\n                        WHERE g.firstName = :firstName\r\n                            AND g.lastName = :lastName \r\n                            AND g.birthDate = :birthDate\r\n                            AND (g.telephoneNumber = :telNr OR g.email = :email)\r\n                        \"\"\", GuestEntity.class);\r\n\r\n                query.setParameter(\"firstName\", guest.getFirstName());\r\n                query.setParameter(\"lastName\", guest.getLastName());\r\n                query.setParameter(\"birthDate\", guest.getBirthdate());\r\n                query.setParameter(\"telNr\", guest.getTelephoneNumber());\r\n                query.setParameter(\"email\", guest.getEmailAddress());\r\n\r\n                List<GuestEntity> guests = executeTypedQuery(query);\r\n\r\n                if (guests.isEmpty()){\r\n                    return false;\r\n                } else{\r\n                    Integer id = guests.get(0).getId();\r\n                    guest.setId(id);\r\n                    return true;\r\n                }\r\n            } else {\r\n                GuestEntity g = em.find(GuestEntity.class, guest.getId());\r\n                guest.setId(g.getId());\r\n                return true;\r\n            }\r\n        } catch (NoResultException e) {\r\n            log.info(\"No catering types in database\");\r\n            return false;\r\n        } catch (PersistenceException e) {\r\n            // TODO show user error message: database down\r\n            log.error(e.toString(), e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private <T> List<T> executeTypedQuery(TypedQuery<T> query) {\r\n        try {\r\n            List<T> queryResultList = query.getResultList();\r\n\r\n            return queryResultList;\r\n        } catch (NoResultException e) {\r\n            log.error(e.toString(), e);\r\n            return new ArrayList<T>();\r\n        } catch (PersistenceException e) {\r\n            // TODO show user error message: database down\r\n            log.error(e.toString(), e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private Properties getDbAccessProperties() {\r\n        Properties dbAccessProperties;\r\n\r\n        try(InputStream is = getClass().getClassLoader().getResourceAsStream(\"db.properties\") ) {\r\n            dbAccessProperties = new Properties();\r\n            dbAccessProperties.load(is);\r\n        }\r\n        catch(IOException | IllegalArgumentException | NullPointerException e ) {\r\n            final String msg = \"Loading database connection properties failed\";\r\n            log.error(msg, e);\r\n            throw new RuntimeException(msg);\r\n        }\r\n        return dbAccessProperties;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/n4ims/hotelsystem/persistence/BookingDataServiceImpl.java b/src/main/java/com/n4ims/hotelsystem/persistence/BookingDataServiceImpl.java
--- a/src/main/java/com/n4ims/hotelsystem/persistence/BookingDataServiceImpl.java	(revision 6488e4ec01daeda10f600ce5b77a5180ff44d4bd)
+++ b/src/main/java/com/n4ims/hotelsystem/persistence/BookingDataServiceImpl.java	(date 1683280513354)
@@ -193,14 +193,12 @@
                 return true;
             }
         } catch (NoResultException e) {
-            log.info("No catering types in database");
             return false;
         } catch (PersistenceException e) {
             // TODO show user error message: database down
             log.error(e.toString(), e);
             throw e;
         }
-
     }
 
     private boolean ifGuestInDbUpdateId(GuestEntity guest){
@@ -248,6 +246,12 @@
         }
     }
 
+    /**
+     *
+     * @param query
+     * @return null if NoResultException, List<T> if results available
+     * @param <T> Entity type of the query
+     */
     private <T> List<T> executeTypedQuery(TypedQuery<T> query) {
         try {
             List<T> queryResultList = query.getResultList();
